{
  "openapi" : "3.0.1",
  "info" : {
    "description" : "# Goal\nThis API Description is used as the basis to show code generating use-cases.\n\n\n<SecurityDefinitions />",
    "title" : "API for Demo",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "description" : "Default server",
    "url" : "https://www.apidemoserver.com/api"
  } ],
  "security" : [ {
    "httpBasic" : [ ]
  } ],
  "paths" : {
    "/person" : {
      "get" : {
        "description" : "This Endpoint will be used to get a list of all persons.",
        "operationId" : "getPersons",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Person"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Array of all persons."
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "BAD REQUEST",
                  "status" : 400
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "BAD REQUEST: Die Anfrage ist nicht valide."
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "UNAUTHORIZED",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "UNAUTHORIZED: Der Benutzer ist nicht berechtigt diesen Service aufzurufen"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "INTERNAL SERVER ERROR",
                  "status" : 500
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "INTERNAL SERVER ERROR: Alle sonstigen Fehler"
          }
        },
        "summary" : "Query Persons",
        "tags" : [ "Person" ]
      }
    },
    "/person/{person-id}" : {
      "delete" : {
        "description" : "Deletes a Person identified by its person-id",
        "operationId" : "deletePerson",
        "parameters" : [ {
          "description" : "Eindeutige ID für die Personenstammdaten als UUID",
          "explode" : false,
          "in" : "path",
          "name" : "person-id",
          "required" : true,
          "schema" : {
            "format" : "UUID",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "204" : {
            "description" : "NO CONTENT: Delete was successfully performed."
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "BAD REQUEST",
                  "status" : 400
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "BAD REQUEST: The Request is not valid."
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "UNAUTHORIZED",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "UNAUTHORIZED: The User is not authorized to call the endpoint"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "INTERNAL SERVER ERROR",
                  "status" : 500
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "INTERNAL SERVER ERROR: Other Errors on Server."
          }
        },
        "summary" : "Delete Person",
        "tags" : [ "Person" ]
      },
      "get" : {
        "description" : "This Endpoint will be used to get the person information for a specific Person identified by the person-id.",
        "operationId" : "getPerson",
        "parameters" : [ {
          "description" : "Eindeutige ID für die Personenstammdaten als UUID",
          "explode" : false,
          "in" : "path",
          "name" : "person-id",
          "required" : true,
          "schema" : {
            "format" : "UUID",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Person"
                }
              }
            },
            "description" : "The JSON Object for the corresponding person."
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "BAD REQUEST",
                  "status" : 400
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "BAD REQUEST: The Request is not valid."
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "UNAUTHORIZED",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "UNAUTHORIZED: The User is not authorized to call the endpoint"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "INTERNAL SERVER ERROR",
                  "status" : 500
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "INTERNAL SERVER ERROR: Other Errors on Server."
          }
        },
        "summary" : "Query Person",
        "tags" : [ "Person" ]
      },
      "patch" : {
        "description" : "Updates a Person according to the given request object.",
        "operationId" : "updatePerson",
        "parameters" : [ {
          "description" : "Eindeutige ID für die Personenstammdaten als UUID",
          "explode" : false,
          "in" : "path",
          "name" : "person-id",
          "required" : true,
          "schema" : {
            "format" : "UUID",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Person"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "UPDATE: The ressource was successfully changed.",
            "headers" : {
              "Location" : {
                "explode" : false,
                "schema" : {
                  "description" : "The Location of the changed resource",
                  "example" : "https://www.apidemoserver.com/api/v1/person/5399b86a-d928-48b5-923d-b656d36b610a",
                  "format" : "URI",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "BAD REQUEST",
                  "status" : 400
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "BAD REQUEST: The Request is not valid."
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "UNAUTHORIZED",
                  "status" : 401
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "UNAUTHORIZED: The User is not authorized to call the endpoint"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "title" : "INTERNAL SERVER ERROR",
                  "status" : 500
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "INTERNAL SERVER ERROR: Other Errors on Server."
          }
        },
        "summary" : "Update Person",
        "tags" : [ "Person" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Person" : {
        "description" : "Persondescription as an object",
        "example" : {
          "address" : {
            "city" : "Springfield",
            "street" : "Evergreen Terace",
            "postalCode" : "1234",
            "houseNumber" : "7a"
          },
          "gender" : "m",
          "name" : {
            "surname" : "John",
            "lastname" : "Doe"
          },
          "personId" : "5399b86a-d928-48b5-923d-b656d36b610a",
          "eMail" : "john@doe.com"
        },
        "properties" : {
          "personId" : {
            "description" : "Unique ID of the person",
            "example" : "5399b86a-d928-48b5-923d-b656d36b610a",
            "format" : "UUID",
            "readOnly" : true,
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/Person_name"
          },
          "gender" : {
            "enum" : [ "m", "f", "d" ],
            "example" : "m",
            "format" : "enum",
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/Person_address"
          },
          "eMail" : {
            "example" : "john@doe.com",
            "format" : "eMail",
            "pattern" : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
            "type" : "string"
          }
        },
        "required" : [ "gender", "name", "personId" ],
        "type" : "object"
      },
      "Problem" : {
        "description" : "This object represents a problem and is structured after [RFC7807]",
        "properties" : {
          "type" : {
            "default" : "about:blank",
            "description" : "A absolute URI reference [RFC 3986] that identifies the problem type.\n",
            "format" : "uri",
            "type" : "string"
          },
          "title" : {
            "description" : "A short, human-readable summary of the problem type.\n",
            "example" : "Not Found",
            "type" : "string"
          },
          "status" : {
            "description" : "The HTTP status code generated by the origin server for this occurrence of the problem.\n",
            "example" : 404,
            "exclusiveMaximum" : true,
            "format" : "int32",
            "maximum" : 600,
            "minimum" : 100,
            "type" : "integer"
          },
          "detail" : {
            "description" : "A human-readable explanation specific to this occurrence of the problem.\n",
            "example" : "The requested resource could not be found.",
            "type" : "string"
          },
          "instance" : {
            "description" : "A URI reference that identifies the specific\noccurrence of the problem.  It may or may not yield further\ninformation if dereferenced.\n",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Person_name" : {
        "example" : {
          "surname" : "John",
          "lastname" : "Doe"
        },
        "properties" : {
          "surname" : {
            "example" : "John",
            "format" : "string",
            "maxLength" : 128,
            "minLength" : 1,
            "type" : "string"
          },
          "lastname" : {
            "example" : "Doe",
            "format" : "string",
            "maxLength" : 128,
            "minLength" : 1,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Person_address" : {
        "example" : {
          "city" : "Springfield",
          "street" : "Evergreen Terace",
          "postalCode" : "1234",
          "houseNumber" : "7a"
        },
        "properties" : {
          "street" : {
            "example" : "Evergreen Terace",
            "format" : "string",
            "maxLength" : 128,
            "minLength" : 1,
            "type" : "string"
          },
          "houseNumber" : {
            "example" : "7a",
            "format" : "string",
            "maxLength" : 10,
            "minLength" : 1,
            "type" : "string"
          },
          "postalCode" : {
            "example" : "1234",
            "format" : "string",
            "maxLength" : 10,
            "minLength" : 1,
            "type" : "string"
          },
          "city" : {
            "example" : "Springfield",
            "format" : "string",
            "maxLength" : 128,
            "minLength" : 1,
            "type" : "string"
          }
        },
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "httpBasic" : {
        "description" : "Die Kommunikation erfolgt über HTTPS (HTTP über SSL bzw. TLS).",
        "scheme" : "basic",
        "type" : "http"
      }
    }
  }
}
