/*
 * API for Demo
 *
 * # Goal This API Description is used as the basis to show code generating use-cases.   <SecurityDefinitions />
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Demo.Provider.Service.Attributes;
using Demo.Provider.Service.Models;

namespace Demo.Provider.Service.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PersonApiController : ControllerBase
    {
        private readonly Database _database;

        public PersonApiController(Database database)
        {
            _database = database;
        }

        /// <summary>
        /// Delete Person
        /// </summary>
        /// <remarks>Deletes a Person identified by its person-id</remarks>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <response code="204">NO CONTENT: Delete was successfully performed.</response>
        /// <response code="400">BAD REQUEST: The Request is not valid.</response>
        /// <response code="401">UNAUTHORIZED: The User is not authorized to call the endpoint</response>
        /// <response code="500">INTERNAL SERVER ERROR: Other Errors on Server.</response>
        [HttpDelete]
        [Route("/api/person/{person-id}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePerson")]
        [SwaggerResponse(statusCode: 400, type: typeof(Problem), description: "BAD REQUEST: The Request is not valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Problem),
            description: "UNAUTHORIZED: The User is not authorized to call the endpoint")]
        [SwaggerResponse(statusCode: 500, type: typeof(Problem),
            description: "INTERNAL SERVER ERROR: Other Errors on Server.")]
        public virtual IActionResult DeletePerson([FromRoute(Name = "person-id")] [Required] Guid personId)
        {
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Problem));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Problem));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Problem));
            if (personId == Guid.Empty)
                return BadRequest();
            if (_database.Remove(personId))
                return NoContent();

            return BadRequest();
        }

        /// <summary>
        /// Query Person
        /// </summary>
        /// <remarks>This Endpoint will be used to get the person information for a specific Person identified by the person-id.</remarks>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <response code="200">The JSON Object for the corresponding person.</response>
        /// <response code="400">BAD REQUEST: The Request is not valid.</response>
        /// <response code="401">UNAUTHORIZED: The User is not authorized to call the endpoint</response>
        /// <response code="500">INTERNAL SERVER ERROR: Other Errors on Server.</response>
        [HttpGet]
        [Route("/api/person/{person-id}", Name = "GetPerson")]
        [ValidateModelState]
        [SwaggerOperation("GetPerson")]
        [SwaggerResponse(statusCode: 200, type: typeof(Person),
            description: "The JSON Object for the corresponding person.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Problem), description: "BAD REQUEST: The Request is not valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Problem),
            description: "UNAUTHORIZED: The User is not authorized to call the endpoint")]
        [SwaggerResponse(statusCode: 500, type: typeof(Problem),
            description: "INTERNAL SERVER ERROR: Other Errors on Server.")]
        public virtual IActionResult GetPerson([FromRoute(Name = "person-id")] [Required] Guid personId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Person));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Problem));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Problem));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Problem));
            if (personId == Guid.Empty)
                return BadRequest();
            if (_database.Get(personId, out Person person))
                return Ok(person);
            else
                return NotFound();
        }

        /// <summary>
        /// Query Persons
        /// </summary>
        /// <remarks>This Endpoint will be used to get a list of all persons.</remarks>
        /// <response code="200">Array of all persons.</response>
        /// <response code="400">BAD REQUEST: Die Anfrage ist nicht valide.</response>
        /// <response code="401">UNAUTHORIZED: Der Benutzer ist nicht berechtigt diesen Service aufzurufen</response>
        /// <response code="500">INTERNAL SERVER ERROR: Alle sonstigen Fehler</response>
        [HttpGet]
        [Route("/api/person")]
        [ValidateModelState]
        [SwaggerOperation("GetPersons")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Person>), description: "Array of all persons.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Problem),
            description: "BAD REQUEST: Die Anfrage ist nicht valide.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Problem),
            description: "UNAUTHORIZED: Der Benutzer ist nicht berechtigt diesen Service aufzurufen")]
        [SwaggerResponse(statusCode: 500, type: typeof(Problem),
            description: "INTERNAL SERVER ERROR: Alle sonstigen Fehler")]
        public virtual IActionResult GetPersons()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Person>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Problem));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Problem));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Problem));
            return Ok(_database.All());
        }

        /// <summary>
        /// Update Person
        /// </summary>
        /// <remarks>Updates a Person according to the given request object.</remarks>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="person"></param>
        /// <response code="201">UPDATE: The ressource was successfully changed.</response>
        /// <response code="400">BAD REQUEST: The Request is not valid.</response>
        /// <response code="401">UNAUTHORIZED: The User is not authorized to call the endpoint</response>
        /// <response code="500">INTERNAL SERVER ERROR: Other Errors on Server.</response>
        [HttpPatch]
        [Route("/api/person/{person-id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePerson")]
        [SwaggerResponse(statusCode: 400, type: typeof(Problem), description: "BAD REQUEST: The Request is not valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Problem),
            description: "UNAUTHORIZED: The User is not authorized to call the endpoint")]
        [SwaggerResponse(statusCode: 500, type: typeof(Problem),
            description: "INTERNAL SERVER ERROR: Other Errors on Server.")]
        public virtual IActionResult UpdatePerson([FromRoute(Name = "person-id")] [Required] Guid personId,
            [FromBody] Person person)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Problem));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Problem));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Problem));
            if (personId == Guid.Empty || person is null)
                return BadRequest();

            _database.Update(personId, person);
            var redirectTo = this.Url.RouteUrl("GetPerson", values: new { personId });
            // var redirectTo = this.Url.Link("GetPerson", values : new { personId});
            return Created(Url.Content("~/api/person/" + personId), null);
        }
    }
}