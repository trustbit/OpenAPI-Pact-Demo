/*
 * API for Demo
 *
 * # Goal This API Description is used as the basis to show code generating use-cases.   <SecurityDefinitions />
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Demo.Provider.Service.Converters;

namespace Demo.Provider.Service.Models
{ 
    /// <summary>
    /// Persondescription as an object
    /// </summary>
    [DataContract]
    public partial class Person : IEquatable<Person>
    {
        /// <summary>
        /// Unique ID of the person
        /// </summary>
        /// <value>Unique ID of the person</value>
        /// <example>&quot;5399b86a-d928-48b5-923d-b656d36b610a&quot;</example>
        [Required]
        [DataMember(Name="personId", EmitDefaultValue=false)]
        public Guid PersonId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public PersonName Name { get; set; }


        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<GenderEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum MEnum for m
            /// </summary>
            [EnumMember(Value = "m")]
            MEnum = 1,
            
            /// <summary>
            /// Enum FEnum for f
            /// </summary>
            [EnumMember(Value = "f")]
            FEnum = 2,
            
            /// <summary>
            /// Enum DEnum for d
            /// </summary>
            [EnumMember(Value = "d")]
            DEnum = 3
        }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        /// <example>&quot;m&quot;</example>
        [Required]
        [DataMember(Name="gender", EmitDefaultValue=true)]
        public GenderEnum Gender { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public PersonAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets EMail
        /// </summary>
        /// <example>&quot;john@doe.com&quot;</example>
        [RegularExpression("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")]
        [DataMember(Name="eMail", EmitDefaultValue=false)]
        public string EMail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Person {\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  EMail: ").Append(EMail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Person)obj);
        }

        /// <summary>
        /// Returns true if Person instances are equal
        /// </summary>
        /// <param name="other">Instance of Person to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Person other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PersonId == other.PersonId ||
                    PersonId != null &&
                    PersonId.Equals(other.PersonId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Gender == other.Gender ||
                    
                    Gender.Equals(other.Gender)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    EMail == other.EMail ||
                    EMail != null &&
                    EMail.Equals(other.EMail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PersonId != null)
                    hashCode = hashCode * 59 + PersonId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (EMail != null)
                    hashCode = hashCode * 59 + EMail.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Person left, Person right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Person left, Person right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
