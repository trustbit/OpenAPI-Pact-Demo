/*
 * API for Demo
 *
 * # Goal This API Description is used as the basis to show code generating use-cases.   <SecurityDefinitions />
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Demo.Consumer.Client.Client.OpenAPIDateConverter;

namespace Demo.Consumer.Client.Model
{
    /// <summary>
    /// PersonName
    /// </summary>
    [DataContract(Name = "Person_name")]
    public partial class PersonName : IEquatable<PersonName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonName" /> class.
        /// </summary>
        /// <param name="surname">surname.</param>
        /// <param name="lastname">lastname.</param>
        public PersonName(string surname = default(string), string lastname = default(string))
        {
            this.Surname = surname;
            this.Lastname = lastname;
        }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        /// <example>&quot;John&quot;</example>
        [DataMember(Name = "surname", EmitDefaultValue = false)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Lastname
        /// </summary>
        /// <example>&quot;Doe&quot;</example>
        [DataMember(Name = "lastname", EmitDefaultValue = false)]
        public string Lastname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonName {\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonName);
        }

        /// <summary>
        /// Returns true if PersonName instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonName input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Surname != null)
                {
                    hashCode = (hashCode * 59) + this.Surname.GetHashCode();
                }
                if (this.Lastname != null)
                {
                    hashCode = (hashCode * 59) + this.Lastname.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Surname (string) maxLength
            if (this.Surname != null && this.Surname.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Surname, length must be less than 128.", new [] { "Surname" });
            }

            // Surname (string) minLength
            if (this.Surname != null && this.Surname.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Surname, length must be greater than 1.", new [] { "Surname" });
            }

            // Lastname (string) maxLength
            if (this.Lastname != null && this.Lastname.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lastname, length must be less than 128.", new [] { "Lastname" });
            }

            // Lastname (string) minLength
            if (this.Lastname != null && this.Lastname.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lastname, length must be greater than 1.", new [] { "Lastname" });
            }

            yield break;
        }
    }

}
