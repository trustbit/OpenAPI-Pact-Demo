/*
 * API for Demo
 *
 * # Goal This API Description is used as the basis to show code generating use-cases.   <SecurityDefinitions />
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Demo.Consumer.Client.Client;
using Demo.Consumer.Client.Model;

namespace Demo.Consumer.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Person
        /// </summary>
        /// <remarks>
        /// Deletes a Person identified by its person-id
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePerson(Guid personId, int operationIndex = 0);

        /// <summary>
        /// Delete Person
        /// </summary>
        /// <remarks>
        /// Deletes a Person identified by its person-id
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePersonWithHttpInfo(Guid personId, int operationIndex = 0);
        /// <summary>
        /// Query Person
        /// </summary>
        /// <remarks>
        /// This Endpoint will be used to get the person information for a specific Person identified by the person-id.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        Person GetPerson(Guid personId, int operationIndex = 0);

        /// <summary>
        /// Query Person
        /// </summary>
        /// <remarks>
        /// This Endpoint will be used to get the person information for a specific Person identified by the person-id.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> GetPersonWithHttpInfo(Guid personId, int operationIndex = 0);
        /// <summary>
        /// Query Persons
        /// </summary>
        /// <remarks>
        /// This Endpoint will be used to get a list of all persons.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Person&gt;</returns>
        List<Person> GetPersons(int operationIndex = 0);

        /// <summary>
        /// Query Persons
        /// </summary>
        /// <remarks>
        /// This Endpoint will be used to get a list of all persons.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        ApiResponse<List<Person>> GetPersonsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update Person
        /// </summary>
        /// <remarks>
        /// Updates a Person according to the given request object.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="person"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdatePerson(Guid personId, Person person = default(Person), int operationIndex = 0);

        /// <summary>
        /// Update Person
        /// </summary>
        /// <remarks>
        /// Updates a Person according to the given request object.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="person"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePersonWithHttpInfo(Guid personId, Person person = default(Person), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Person
        /// </summary>
        /// <remarks>
        /// Deletes a Person identified by its person-id
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePersonAsync(Guid personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Person
        /// </summary>
        /// <remarks>
        /// Deletes a Person identified by its person-id
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePersonWithHttpInfoAsync(Guid personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query Person
        /// </summary>
        /// <remarks>
        /// This Endpoint will be used to get the person information for a specific Person identified by the person-id.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> GetPersonAsync(Guid personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query Person
        /// </summary>
        /// <remarks>
        /// This Endpoint will be used to get the person information for a specific Person identified by the person-id.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> GetPersonWithHttpInfoAsync(Guid personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query Persons
        /// </summary>
        /// <remarks>
        /// This Endpoint will be used to get a list of all persons.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        System.Threading.Tasks.Task<List<Person>> GetPersonsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query Persons
        /// </summary>
        /// <remarks>
        /// This Endpoint will be used to get a list of all persons.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Person>>> GetPersonsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Person
        /// </summary>
        /// <remarks>
        /// Updates a Person according to the given request object.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="person"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePersonAsync(Guid personId, Person person = default(Person), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Person
        /// </summary>
        /// <remarks>
        /// Updates a Person according to the given request object.
        /// </remarks>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="person"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePersonWithHttpInfoAsync(Guid personId, Person person = default(Person), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApi : IPersonApiSync, IPersonApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonApi : IPersonApi
    {
        private Demo.Consumer.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonApi(string basePath)
        {
            this.Configuration = Demo.Consumer.Client.Client.Configuration.MergeConfigurations(
                Demo.Consumer.Client.Client.GlobalConfiguration.Instance,
                new Demo.Consumer.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Demo.Consumer.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Demo.Consumer.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Demo.Consumer.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonApi(Demo.Consumer.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Demo.Consumer.Client.Client.Configuration.MergeConfigurations(
                Demo.Consumer.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Demo.Consumer.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Demo.Consumer.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Demo.Consumer.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PersonApi(Demo.Consumer.Client.Client.ISynchronousClient client, Demo.Consumer.Client.Client.IAsynchronousClient asyncClient, Demo.Consumer.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Demo.Consumer.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Demo.Consumer.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Demo.Consumer.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Demo.Consumer.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Demo.Consumer.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Person Deletes a Person identified by its person-id
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePerson(Guid personId, int operationIndex = 0)
        {
            DeletePersonWithHttpInfo(personId);
        }

        /// <summary>
        /// Delete Person Deletes a Person identified by its person-id
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Demo.Consumer.Client.Client.ApiResponse<Object> DeletePersonWithHttpInfo(Guid personId, int operationIndex = 0)
        {
            Demo.Consumer.Client.Client.RequestOptions localVarRequestOptions = new Demo.Consumer.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("person-id", Demo.Consumer.Client.Client.ClientUtils.ParameterToString(personId)); // path parameter

            localVarRequestOptions.Operation = "PersonApi.DeletePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (httpBasic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Demo.Consumer.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/person/{person-id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Person Deletes a Person identified by its person-id
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePersonAsync(Guid personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePersonWithHttpInfoAsync(personId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Person Deletes a Person identified by its person-id
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Demo.Consumer.Client.Client.ApiResponse<Object>> DeletePersonWithHttpInfoAsync(Guid personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Demo.Consumer.Client.Client.RequestOptions localVarRequestOptions = new Demo.Consumer.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("person-id", Demo.Consumer.Client.Client.ClientUtils.ParameterToString(personId)); // path parameter

            localVarRequestOptions.Operation = "PersonApi.DeletePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (httpBasic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Demo.Consumer.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/person/{person-id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query Person This Endpoint will be used to get the person information for a specific Person identified by the person-id.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        public Person GetPerson(Guid personId, int operationIndex = 0)
        {
            Demo.Consumer.Client.Client.ApiResponse<Person> localVarResponse = GetPersonWithHttpInfo(personId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query Person This Endpoint will be used to get the person information for a specific Person identified by the person-id.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        public Demo.Consumer.Client.Client.ApiResponse<Person> GetPersonWithHttpInfo(Guid personId, int operationIndex = 0)
        {
            Demo.Consumer.Client.Client.RequestOptions localVarRequestOptions = new Demo.Consumer.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("person-id", Demo.Consumer.Client.Client.ClientUtils.ParameterToString(personId)); // path parameter

            localVarRequestOptions.Operation = "PersonApi.GetPerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (httpBasic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Demo.Consumer.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Person>("/person/{person-id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query Person This Endpoint will be used to get the person information for a specific Person identified by the person-id.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> GetPersonAsync(Guid personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Demo.Consumer.Client.Client.ApiResponse<Person> localVarResponse = await GetPersonWithHttpInfoAsync(personId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query Person This Endpoint will be used to get the person information for a specific Person identified by the person-id.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<Demo.Consumer.Client.Client.ApiResponse<Person>> GetPersonWithHttpInfoAsync(Guid personId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Demo.Consumer.Client.Client.RequestOptions localVarRequestOptions = new Demo.Consumer.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("person-id", Demo.Consumer.Client.Client.ClientUtils.ParameterToString(personId)); // path parameter

            localVarRequestOptions.Operation = "PersonApi.GetPerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (httpBasic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Demo.Consumer.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Person>("/person/{person-id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query Persons This Endpoint will be used to get a list of all persons.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Person&gt;</returns>
        public List<Person> GetPersons(int operationIndex = 0)
        {
            Demo.Consumer.Client.Client.ApiResponse<List<Person>> localVarResponse = GetPersonsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query Persons This Endpoint will be used to get a list of all persons.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        public Demo.Consumer.Client.Client.ApiResponse<List<Person>> GetPersonsWithHttpInfo(int operationIndex = 0)
        {
            Demo.Consumer.Client.Client.RequestOptions localVarRequestOptions = new Demo.Consumer.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PersonApi.GetPersons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (httpBasic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Demo.Consumer.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Person>>("/person", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query Persons This Endpoint will be used to get a list of all persons.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        public async System.Threading.Tasks.Task<List<Person>> GetPersonsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Demo.Consumer.Client.Client.ApiResponse<List<Person>> localVarResponse = await GetPersonsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query Persons This Endpoint will be used to get a list of all persons.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        public async System.Threading.Tasks.Task<Demo.Consumer.Client.Client.ApiResponse<List<Person>>> GetPersonsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Demo.Consumer.Client.Client.RequestOptions localVarRequestOptions = new Demo.Consumer.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PersonApi.GetPersons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (httpBasic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Demo.Consumer.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Person>>("/person", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Person Updates a Person according to the given request object.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="person"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdatePerson(Guid personId, Person person = default(Person), int operationIndex = 0)
        {
            UpdatePersonWithHttpInfo(personId, person);
        }

        /// <summary>
        /// Update Person Updates a Person according to the given request object.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="person"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Demo.Consumer.Client.Client.ApiResponse<Object> UpdatePersonWithHttpInfo(Guid personId, Person person = default(Person), int operationIndex = 0)
        {
            Demo.Consumer.Client.Client.RequestOptions localVarRequestOptions = new Demo.Consumer.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("person-id", Demo.Consumer.Client.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.Data = person;

            localVarRequestOptions.Operation = "PersonApi.UpdatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (httpBasic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Demo.Consumer.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/person/{person-id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Person Updates a Person according to the given request object.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="person"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePersonAsync(Guid personId, Person person = default(Person), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdatePersonWithHttpInfoAsync(personId, person, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Person Updates a Person according to the given request object.
        /// </summary>
        /// <exception cref="Demo.Consumer.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Eindeutige ID für die Personenstammdaten als UUID</param>
        /// <param name="person"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Demo.Consumer.Client.Client.ApiResponse<Object>> UpdatePersonWithHttpInfoAsync(Guid personId, Person person = default(Person), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Demo.Consumer.Client.Client.RequestOptions localVarRequestOptions = new Demo.Consumer.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Demo.Consumer.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("person-id", Demo.Consumer.Client.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.Data = person;

            localVarRequestOptions.Operation = "PersonApi.UpdatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (httpBasic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Demo.Consumer.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/person/{person-id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
